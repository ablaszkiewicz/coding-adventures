var H=Object.defineProperty;var B=(w,p,h)=>p in w?H(w,p,{enumerable:!0,configurable:!0,writable:!0,value:h}):w[p]=h;var m=(w,p,h)=>(B(w,typeof p!="symbol"?p+"":p,h),h);(function(){"use strict";class w{constructor(t,s){this.min=t,this.max=s}surrounds(t){return t>=this.min&&t<=this.max}clamp(t){return t<this.min?this.min:t>this.max?this.max:t}}function p(o,t,s){const{data:n}=o,{x:e,y:i}=t,{x:a,y:c,z:d}=s,l=(i*o.width+e)*4,y=new w(0,.999),u=256*y.clamp(a),g=256*y.clamp(c),P=256*y.clamp(d);n[l]=u,n[l+1]=g,n[l+2]=P,n[l+3]=255}const h=Number.POSITIVE_INFINITY;function M(o,t){return Math.random()*(t-o)+o}const I=o=>new r(o.z,o.y,-o.x);class r{constructor(t,s,n){this.x=t,this.y=s,this.z=n}add(t){return new r(this.x+t.x,this.y+t.y,this.z+t.z)}subtract(t){return new r(this.x-t.x,this.y-t.y,this.z-t.z)}scalarMultiply(t){return new r(this.x*t,this.y*t,this.z*t)}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}lengthSquared(){return this.x*this.x+this.y*this.y+this.z*this.z}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}cross(t){return new r(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}unit(){return this.scalarMultiply(1/this.length())}static randomInUnitSphere(){for(;;){const t=r.randomBetween(-1,1);if(!(t.lengthSquared()>=1))return t}}static randomUnitVector(){return r.randomInUnitSphere().unit()}randomOnHemisphere(){const t=r.randomInUnitSphere();return t.dot(this)>0?t:t.scalarMultiply(-1)}static random(){return new r((Math.random()-.5)*h,(Math.random()-.5)*h,(Math.random()-.5)*h)}static randomBetween(t,s){return new r(M(t,s),M(t,s),M(t,s))}}class z{constructor(){m(this,"position",new r(0,0,0));m(this,"normal",new r(0,0,0));m(this,"t",0)}setFaceNormal(t,s){t.direction.dot(s)<0?this.normal=s:this.normal=s.scalarMultiply(-1)}}class S{constructor(t,s){this.origin=t,this.direction=s}at(t){return this.origin.add(this.direction.scalarMultiply(t))}}const x=800,D=16/9,f=x/D;class T{constructor(){m(this,"center");m(this,"pixel00Position");m(this,"pixelDeltaU");m(this,"pixelDeltaV");m(this,"pixelSamplesScale")}render(t,s,n){this.initialize(s);const e=new ImageData(x,f);let i=0;for(let a=0;a<x;a++)for(let c=0;c<f;c++){let d=new r(0,0,0);for(let y=0;y<s.samples;y++){const u=this.getRay(a,c);d=d.add(this.rayColor(u,t,s.bounces))}p(e,{x:a,y:c},d.scalarMultiply(this.pixelSamplesScale));const l=(a*f+c)/(x*f)*100;n&&l-i>1&&(n(l),i=l)}return e}initialize(t){this.center=new r(0,0,0),this.pixelSamplesScale=1/t.samples;const s=1,n=2,e=n*x/f,i=new r(e,0,0),a=new r(0,-n,0);this.pixelDeltaU=i.scalarMultiply(1/x),this.pixelDeltaV=a.scalarMultiply(1/f),this.pixel00Position=this.center.subtract(new r(0,0,s)).subtract(i.scalarMultiply(.5)).subtract(a.scalarMultiply(.5))}rayColor(t,s,n){if(n<=0)return new r(0,0,0);const e=new z;if(s.hit(t,.001,h,e)){const c=e.normal.add(r.randomUnitVector());return this.rayColor(new S(e.position,c),s,n-1).scalarMultiply(.5)}const a=.5*(t.direction.unit().y+1);return new r(.5,.7,1).scalarMultiply(a).add(new r(1,1,1).scalarMultiply(1-a))}getRay(t,s){const n=this.sampleSquare(),e=this.pixel00Position.add(this.pixelDeltaU.scalarMultiply(t+n.x)).add(this.pixelDeltaV.scalarMultiply(s+n.y)),i=this.center,a=e.subtract(this.center);return new S(i,a)}sampleSquare(){return new r(Math.random()-.5,Math.random()-.5,0)}}class U{constructor(t){this.objects=t}hit(t,s,n,e){const i=new z;let a=!1,c=n;for(const d of this.objects)d.hit(t,s,c,i)&&(a=!0,c=i.t,e.normal=i.normal,e.position=i.position,e.t=i.t);return a}}class b{constructor(t,s){this.center=t,this.radius=s}hit(t,s,n,e){const i=this.center.subtract(t.origin),a=t.direction.lengthSquared(),c=t.direction.dot(i),d=i.lengthSquared()-this.radius*this.radius,l=c*c-a*d;if(l<0)return!1;const y=Math.sqrt(l);let u=(c-y)/a;if((u<=s||u>=n)&&(u=(c+y)/a,u<=s||u>=n))return!1;e.t=u,e.position=t.at(u);const g=e.position.subtract(this.center).scalarMultiply(1/this.radius);return e.setFaceNormal(t,g),!0}}class q{constructor(){}render(t,s,n){const e=new U([...t.map(c=>new b(c,.5)),new b(new r(0,-100.5,-1),100)]);return new T().render(e,s,n)}}onmessage=async o=>{console.log(o);const t=o.data,s=t.objectsPositions.map(i=>I({x:i.x,y:i.y,z:i.z})),e=await new q().render(s,t.options,i=>postMessage({status:"progress",data:i}));postMessage({status:"done",data:e})}})();
