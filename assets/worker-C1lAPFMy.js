var A=Object.defineProperty;var B=(w,u,l)=>u in w?A(w,u,{enumerable:!0,configurable:!0,writable:!0,value:l}):w[u]=l;var m=(w,u,l)=>(B(w,typeof u!="symbol"?u+"":u,l),l);(function(){"use strict";class w{constructor(t,s){this.min=t,this.max=s}surrounds(t){return t>=this.min&&t<=this.max}clamp(t){return t<this.min?this.min:t>this.max?this.max:t}}function u(c,t,s){const{data:i}=c,{x:e,y:n}=t,{x:a,y:o,z:d}=s,h=(n*c.width+e)*4,y=new w(0,.999),p=256*y.clamp(a),g=256*y.clamp(o),T=256*y.clamp(d);i[h]=p,i[h+1]=g,i[h+2]=T,i[h+3]=255}const l=Number.POSITIVE_INFINITY;function f(c,t){return Math.random()*(t-c)+c}class r{constructor(t,s,i){this.x=t,this.y=s,this.z=i}add(t){return new r(this.x+t.x,this.y+t.y,this.z+t.z)}subtract(t){return new r(this.x-t.x,this.y-t.y,this.z-t.z)}scalarMultiply(t){return new r(this.x*t,this.y*t,this.z*t)}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}lengthSquared(){return this.x*this.x+this.y*this.y+this.z*this.z}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}cross(t){return new r(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}unit(){return this.scalarMultiply(1/this.length())}static randomInUnitSphere(){for(;;){const t=r.randomBetween(-1,1);if(!(t.lengthSquared()>=1))return t}}static randomUnitVector(){return r.randomInUnitSphere().unit()}randomOnHemisphere(){const t=r.randomInUnitSphere();return t.dot(this)>0?t:t.scalarMultiply(-1)}static random(){return new r((Math.random()-.5)*l,(Math.random()-.5)*l,(Math.random()-.5)*l)}static randomBetween(t,s){return new r(f(t,s),f(t,s),f(t,s))}}class S{constructor(){m(this,"position",new r(0,0,0));m(this,"normal",new r(0,0,0));m(this,"t",0)}setFaceNormal(t,s){t.direction.dot(s)<0?this.normal=s:this.normal=s.scalarMultiply(-1)}}class z{constructor(t,s){this.origin=t,this.direction=s}at(t){return this.origin.add(this.direction.scalarMultiply(t))}}const x=800,D=16/9,I=10,P=20,M=x/D;class U{constructor(){m(this,"center");m(this,"pixel00Position");m(this,"pixelDeltaU");m(this,"pixelDeltaV");m(this,"pixelSamplesScale")}render(t,s){this.initialize();const i=new ImageData(x,M);let e=0;for(let n=0;n<x;n++)for(let a=0;a<M;a++){let o=new r(0,0,0);for(let h=0;h<I;h++){const y=this.getRay(n,a);o=o.add(this.rayColor(y,t,P))}u(i,{x:n,y:a},o.scalarMultiply(this.pixelSamplesScale));const d=(n*M+a)/(x*M)*100;s&&d-e>1&&(s(d),e=d)}return i}initialize(){this.center=new r(0,0,0),this.pixelSamplesScale=1/I;const t=1,s=2,i=s*x/M,e=new r(i,0,0),n=new r(0,-s,0);this.pixelDeltaU=e.scalarMultiply(1/x),this.pixelDeltaV=n.scalarMultiply(1/M),this.pixel00Position=this.center.subtract(new r(0,0,t)).subtract(e.scalarMultiply(.5)).subtract(n.scalarMultiply(.5))}rayColor(t,s,i){if(i<=0)return new r(0,0,0);const e=new S;if(s.hit(t,.001,l,e)){const o=e.normal.add(r.randomUnitVector());return this.rayColor(new z(e.position,o),s,i-1).scalarMultiply(.5)}const a=.5*(t.direction.unit().y+1);return new r(.5,.7,1).scalarMultiply(a).add(new r(1,1,1).scalarMultiply(1-a))}getRay(t,s){const i=this.sampleSquare(),e=this.pixel00Position.add(this.pixelDeltaU.scalarMultiply(t+i.x)).add(this.pixelDeltaV.scalarMultiply(s+i.y)),n=this.center,a=e.subtract(this.center);return new z(n,a)}sampleSquare(){return new r(Math.random()-.5,Math.random()-.5,0)}}class q{constructor(t){this.objects=t}hit(t,s,i,e){const n=new S;let a=!1,o=i;for(const d of this.objects)d.hit(t,s,o,n)&&(a=!0,o=n.t,e.normal=n.normal,e.position=n.position,e.t=n.t);return a}}class b{constructor(t,s){this.center=t,this.radius=s}hit(t,s,i,e){const n=this.center.subtract(t.origin),a=t.direction.lengthSquared(),o=t.direction.dot(n),d=n.lengthSquared()-this.radius*this.radius,h=o*o-a*d;if(h<0)return!1;const y=Math.sqrt(h);let p=(o-y)/a;if((p<=s||p>=i)&&(p=(o+y)/a,p<=s||p>=i))return!1;e.t=p,e.position=t.at(p);const g=e.position.subtract(this.center).scalarMultiply(1/this.radius);return e.setFaceNormal(t,g),!0}}class E{constructor(){}render(t,s){const i=new q([...t.map(a=>new b(a,.5)),new b(new r(0,-100.5,-1),100)]);return new U().render(i,s)}}onmessage=async c=>{const s=c.data.objectsPositions.map(n=>new r(n.x,n.y,n.z)),e=await new E().render(s,n=>postMessage({status:"progress",data:n}));postMessage({status:"done",data:e})}})();
