var P=Object.defineProperty;var H=(w,p,u)=>p in w?P(w,p,{enumerable:!0,configurable:!0,writable:!0,value:u}):w[p]=u;var y=(w,p,u)=>(H(w,typeof p!="symbol"?p+"":p,u),u);(function(){"use strict";class w{constructor(t,s){this.min=t,this.max=s}surrounds(t){return t>=this.min&&t<=this.max}clamp(t){return t<this.min?this.min:t>this.max?this.max:t}}function p(c,t,s){const{data:n}=c,{x:e,y:i}=t,{x:a,y:o,z:d}=s,l=(i*c.width+e)*4,m=new w(0,.999),h=256*m.clamp(a),g=256*m.clamp(o),T=256*m.clamp(d);n[l]=h,n[l+1]=g,n[l+2]=T,n[l+3]=255}const u=Number.POSITIVE_INFINITY;function M(c,t){return Math.random()*(t-c)+c}class r{constructor(t,s,n){this.x=t,this.y=s,this.z=n}add(t){return new r(this.x+t.x,this.y+t.y,this.z+t.z)}subtract(t){return new r(this.x-t.x,this.y-t.y,this.z-t.z)}scalarMultiply(t){return new r(this.x*t,this.y*t,this.z*t)}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}lengthSquared(){return this.x*this.x+this.y*this.y+this.z*this.z}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}cross(t){return new r(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}unit(){return this.scalarMultiply(1/this.length())}static randomInUnitSphere(){for(;;){const t=r.randomBetween(-1,1);if(!(t.lengthSquared()>=1))return t}}static randomUnitVector(){return r.randomInUnitSphere().unit()}randomOnHemisphere(){const t=r.randomInUnitSphere();return t.dot(this)>0?t:t.scalarMultiply(-1)}static random(){return new r((Math.random()-.5)*u,(Math.random()-.5)*u,(Math.random()-.5)*u)}static randomBetween(t,s){return new r(M(t,s),M(t,s),M(t,s))}}class S{constructor(){y(this,"position",new r(0,0,0));y(this,"normal",new r(0,0,0));y(this,"t",0)}setFaceNormal(t,s){t.direction.dot(s)<0?this.normal=s:this.normal=s.scalarMultiply(-1)}}class z{constructor(t,s){this.origin=t,this.direction=s}at(t){return this.origin.add(this.direction.scalarMultiply(t))}}const x=800,I=16/9,f=x/I;class D{constructor(){y(this,"center");y(this,"pixel00Position");y(this,"pixelDeltaU");y(this,"pixelDeltaV");y(this,"pixelSamplesScale")}render(t,s,n){this.initialize(s);const e=new ImageData(x,f);let i=0;for(let a=0;a<x;a++)for(let o=0;o<f;o++){let d=new r(0,0,0);for(let m=0;m<s.samples;m++){const h=this.getRay(a,o);d=d.add(this.rayColor(h,t,s.bounces))}p(e,{x:a,y:o},d.scalarMultiply(this.pixelSamplesScale));const l=(a*f+o)/(x*f)*100;n&&l-i>1&&(n(l),i=l)}return e}initialize(t){this.center=new r(0,0,0),this.pixelSamplesScale=1/t.samples;const s=1,n=2,e=n*x/f,i=new r(e,0,0),a=new r(0,-n,0);this.pixelDeltaU=i.scalarMultiply(1/x),this.pixelDeltaV=a.scalarMultiply(1/f),this.pixel00Position=this.center.subtract(new r(0,0,s)).subtract(i.scalarMultiply(.5)).subtract(a.scalarMultiply(.5))}rayColor(t,s,n){if(n<=0)return new r(0,0,0);const e=new S;if(s.hit(t,.001,u,e)){const o=e.normal.add(r.randomUnitVector());return this.rayColor(new z(e.position,o),s,n-1).scalarMultiply(.5)}const a=.5*(t.direction.unit().y+1);return new r(.5,.7,1).scalarMultiply(a).add(new r(1,1,1).scalarMultiply(1-a))}getRay(t,s){const n=this.sampleSquare(),e=this.pixel00Position.add(this.pixelDeltaU.scalarMultiply(t+n.x)).add(this.pixelDeltaV.scalarMultiply(s+n.y)),i=this.center,a=e.subtract(this.center);return new z(i,a)}sampleSquare(){return new r(Math.random()-.5,Math.random()-.5,0)}}class U{constructor(t){this.objects=t}hit(t,s,n,e){const i=new S;let a=!1,o=n;for(const d of this.objects)d.hit(t,s,o,i)&&(a=!0,o=i.t,e.normal=i.normal,e.position=i.position,e.t=i.t);return a}}class b{constructor(t,s){this.center=t,this.radius=s}hit(t,s,n,e){const i=this.center.subtract(t.origin),a=t.direction.lengthSquared(),o=t.direction.dot(i),d=i.lengthSquared()-this.radius*this.radius,l=o*o-a*d;if(l<0)return!1;const m=Math.sqrt(l);let h=(o-m)/a;if((h<=s||h>=n)&&(h=(o+m)/a,h<=s||h>=n))return!1;e.t=h,e.position=t.at(h);const g=e.position.subtract(this.center).scalarMultiply(1/this.radius);return e.setFaceNormal(t,g),!0}}class q{constructor(){}render(t,s,n){const e=new U([...t.map(o=>new b(o,.5)),new b(new r(0,-100.5,-1),100)]);return new D().render(e,s,n)}}onmessage=async c=>{const t=c.data,s=t.objectsPositions.map(i=>new r(i.x,i.y,i.z)),e=await new q().render(s,t.options,i=>postMessage({status:"progress",data:i}));postMessage({status:"done",data:e})}})();
